// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
// Updated by Tom Hillenbrand 1/30/2018

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 *  
 *  |15|14|13|12|11|10|9|8|7|6|5|4|3|2|1|0|
 *   0  0  0  0  0  0  0 0 0 0 0 0 0 0 0 0
 *      
 *  instruction[15] 	--> A or C-instruction
 *  instruction[13..14] --> Unused
 *  instruction[12]	    --> Affecting A or M register
 *  instruction[6..11]  --> Correspond to ALU control bits
 *  instruction[5]      --> Write to A
 *  instruction[4]	    --> Write to D
 *  instruction[3]	    --> Write to M
 *  instruction[2]	    --> Jmp is out < 0
 *  instruction[1]	    --> Jmp is out = 0  these use ng and zr from ALU
 *  instruction[0]	    --> Jmp is out > 0
 *
 * 
 * TO DO:
 *   - Implement jmps via the jmp bits and ng/zr outputs from ALU
 *     into the load and inc control bits of the PC
 *   - Determine whether to write ALU output to M via outM from the
 *     writeM control bit value (instruction[3])
 *        - outM may equal any value when writeM == 0
 *
 *      
 **/

	CHIP CPU {

		IN  inM[16],         // M value input  (M = contents of RAM[A])
			instruction[16], // Instruction for execution
			reset;           // Signals whether to re-start the current
							 // program (reset==1) or continue executing
							 // the current program (reset==0).

		OUT outM[16],        // M value output, from ALU output
			writeM,          // Write to M?, determined from instruction input
			addressM[15],    // Address in data memory (of M), output from A
			pc[15];          // Address of next instruction, output from PC
			
		PARTS:

		// Instruction handling:
		//  if instruction[15] == 0 --> A-instruction
		//  if instruction[15] == 1 --> C-instruction
		Not (in=instruction[15], out=Ainstruction);
		Not (in=Ainstruction, out=Cinstruction);
		
		// Is C-instruction and write to A-register?
		And (a=Cinstruction, b=instruction[5], out=ALUtoA);
		
		// Determine A-regiser input:
		Mux16 (a=instruction, b=ALUout, sel=ALUtoA, out=instrMuxOut);

		// Load A if A-instruction or C-instruction and write to A
		Or (a=Ainstruction, b=ALUtoA, out=loadA);
		ARegister (in=instrMuxOut, load=loadA, out=Aout);
	
		// Select A or M based on a-bit
		Mux16 (a=Aout, b=inM, sel=instruction[12], out=AMout);
		

		// Load the D register from ALU
		And (a=Cinstruction, b=instruction[4], out=loadD);
		DRegister (in=ALUout, load=loadD, out=Dout);
		
		// ALU
		// Control bits based on the instruction input
		ALU(x=Dout, y=AMout,
			zx=instruction[11], nx=instruction[10], zy=instruction[9],
			ny=instruction[8], f=instruction[7], no=instruction[6],
			out=ALUout, zr=ZRout, ng=NGout);
		
		Or16 (a=false, b=Aout, out[0..14]=addressM);
		Or16 (a=false, b=ALUout, out=outM);
		And (a=Cinstruction, b=instruction[3], out=writeM);
		
		And (a=ZRout, b=instruction[1], out=JEQ); // is zero and jmp
		And (a=NGout, b=instruction[2], out=JLT); // is neg and jmp
		Or (a=ZRout, b=NGout, out=zeroOrNeg);
		Not (in=zeroOrNeg, out=positive);
		And (a=positive, b=instruction[0], out=JGT);
		
		Or (a=JEQ, b=JLT, out=JLE);
		Or (a=JLE, b=JGT, out=jump);
		
		And (a=Cinstruction, b=jump, out=PCload);
		Not (in=PCload, out=PCinc);
		PC (in=Aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
		
		
	}