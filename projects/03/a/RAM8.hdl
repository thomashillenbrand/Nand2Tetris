// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl
// Updated by Tom Hillenbrand on 1/25/2018

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:

    // Use the given load value as the input. This gate will return
    // the given load value for given register address.
    // A register's load value will be one only when the given load value is
    // one AND the register corresponds to the given address value.
    DMux8Way (in=load, sel=address,
    	a=aLoad,b=bLoad,c=cLoad,d=dLoad,e=eLoad,f=fLoad,g=gLoad,h=hLoad);
    
    //Set of 8 Registers
    Register (in=in, load=aLoad, out=r1);
    Register (in=in, load=bLoad, out=r2);
    Register (in=in, load=cLoad, out=r3);
    Register (in=in, load=dLoad, out=r4);
    Register (in=in, load=eLoad, out=r5);
    Register (in=in, load=fLoad, out=r6);
    Register (in=in, load=gLoad, out=r7);
    Register (in=in, load=hLoad, out=r8);

    //Select which register value to output based on address
    Mux8Way16 (a=r1, b=r2, c=r3, d=r4, e=r5, f=r6, g=r7, h=r8,
    	sel=address, out=out);





}