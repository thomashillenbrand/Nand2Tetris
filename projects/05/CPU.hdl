// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
// Updated by Tom Hillenbrand 1/30/2018

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 *  
 *  |15|14|13|12|11|10|9|8|7|6|5|4|3|2|1|0|
 *   0  0  0  0  0  0  0 0 0 0 0 0 0 0 0 0
 *      
 *  instruction[15] 	--> A or C-instruction
 *  instruction[13..14] --> Unused
 *  instruction[12]	    --> Affecting A or M register
 *  instruction[6..11]  --> Correspond to ALU control bits
 *  instruction[5]      --> Write to A
 *  instruction[4]	    --> Write to D
 *  instruction[3]	    --> Write to M
 *  instruction[2]	    --> Jmp is out < 0
 *  instruction[1]	    --> Jmp is out = 0  these use ng and zr from ALU
 *  instruction[0]	    --> Jmp is out > 0
 *
 * 
 * TO DO:
 *   - Implement jmps via the jmp bits and ng/zr outputs from ALU
 *     into the load and inc control bits of the PC
 *   - Determine whether to write ALU output to M via outM from the
 *     writeM control bit value (instruction[3])
 *        - outM may equal any value when writeM == 0
 *
 *      
 **/

	CHIP CPU {

		IN  inM[16],         // M value input  (M = contents of RAM[A])
			instruction[16], // Instruction for execution
			reset;           // Signals whether to re-start the current
							 // program (reset==1) or continue executing
							 // the current program (reset==0).

		OUT outM[16],        // [] M value output, from ALU output
			writeM,          // [] Write to M?, determined from instruction input
			addressM[15],    // [X] Address in data memory (of M), output from A
			pc[15];          // [X] address of next instruction, output from PC
			
		PARTS:

		//Instruction handling
		// if instruction[15] == 0 --> A-instruction, use instruction as input
		// if instruction[15] == 1 --> C-instruction, use ALU output as input
		Mux16 (a=aluOutput, b=instruction, sel=instruction[15], out=instrMuxOut);
		
		//Registers:
		ARegister (in=instrMuxOut, load=instruction[5],
			out[0..14]=addressM, out=aOutForPCin, out=aOutForALUin);
		DRegister (in=aluOutput, load=instruction[4], out=dOutForALUin);
		
		// ALU input handling
		// Chosen value dependent on a (instruction[12]).
		// Output A-value if a == 0
		// Output M-value (Memory[A]) if a == 1
		Mux16 (a=aOutForALUin, b=inM, sel=instruction[12], out=MuxALUin);
		
		// ALU
		// Control bits based on the instruction input
		ALU(x=dOutForALUin, y=MuxALUin,
			zx=instruction[6], nx=instruction[7], zy=instruction[8],
			ny=instruction[9], f=instruction[10], no=instruction[11],
			out=aluOutput, out=outM, zr=zr, ng=ng);
			
		// do we write M to memory?
		And  (a=instruction[3], b=instruction[4], out=writeM);
		
		// Program Counter
		// in comes from ARegister output
		// load and inc determined from jmp bits
		//	if 000 --> inc = 1, load = 0
		//  if 111 --> load = 1
		//	if any bit is 1, load = 1, but only based on certain control bits (nz, ng)
		// reset = reset
		// out is first 15 bits of 16-bit output
		
		// Are no jump bits asserted?
		Or (a=instruction[0], b=instruction[1], out=t1);
		Or (a=t1, b=instruction[2], out=t2);
		Not (in=t2, out=pcInc);
		
		// are all jmp bits asserted?
		And (a=instruction[0], b=instruction[1], out=t3);
		And (a=t3, b=instruction[2], out=JMP);
		
		//is the ALU output > 0 and need to JMP?
		Or  (a=ng, b=zr, out=ngORzr);
		Not (in=ngORzr, out=ngNORzr);
		And (a=ngNORzr, b=instruction[0], out=JGT);
		
		//is the ALU output == 0 and nede to JMP?
		And (a=zr, b=instruction[1], out=JEQ);
		
		//is the ALU output < 0 and need to JMP?
		And (a=ng, b=instruction[2], out=JLT);
		
		Or (a=JMP, b=JGT, out=t4);
		Or (a=JLT, b=JEQ, out=t5);
		Or (a=t4, b=t5, out=pcLoad);
		
		PC(in=aOutForPCin,load=pcLoad,inc=pcInc,reset=reset ,out[0..14]=pc);
		
		
		
	}