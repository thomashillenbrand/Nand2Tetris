// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl
// Updated by Tom Hillenbrand 1/30/2018

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 *
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 *
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 (addr>24576) is invalid. Access to any address in 
 * the range 0x4000-0x5FFF (16384-24575) results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    // Either DMux or Mux to get hte proper values to be the out value.
    // Need to specify which chip to actually load for.
    // Are the addresses literally tied to these chips...how does that work?

    // RAM16k chip [0, 16383]
    RAM16K (in=, load=, address=, out=ramOut);

    // SCREEN chip [16384, 24575]
    Screen (in=, load=, address=, out=screenOut);

    // KEYBOARD chip [24576]
    Keyboard (out=kbdOut);
}